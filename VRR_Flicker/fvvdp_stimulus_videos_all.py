# Example showing how to run FovVideoVDP on a numpy array with a video
# The video is autogenerated in this example. See ex_aliasing.py for an example in which video is loaded from .mp4 files

import os
import time
import numpy as np
from tqdm import tqdm
import json
import pyfvvdp
import sys
import cv2
import imageio
import pandas as pd

from generate_stimulus_videos import generate_quest_luminance_one_video
from LuminanceVRR2Sensitivity import LuminanceVRR2Sensitivity
luminance_vrr_2_sensitivity = LuminanceVRR2Sensitivity()
import warnings
warnings.filterwarnings("ignore")
'''
Results of current version (for reference):
Quality for static noise: 8.793 JOD (took 2.4667 secs to compute)
Quality for dynamic noise: 9.307 JOD (took 1.4988 secs to compute)
'''

def get_quality_for_all_settings(duration, fps, screen_width, screen_height):
    total_frames = fps * duration

    df = pd.read_csv(r'yancheng2024_sensitivity_average.csv')
    radius_list = list(df['Radius'].drop_duplicates().sort_values())
    frr_list = list(df['FRR'].drop_duplicates().sort_values())

    json_dump_dict= {}
    quality_array = np.full((len(radius_list), len(frr_list)), np.nan)
    Luminance_peak = 10
    for radius_index in tqdm(range(len(radius_list))):
        radius_value = radius_list[radius_index]
        for frr_index in tqdm(range(len(frr_list))):
            frr_value = frr_list[frr_index]
            sub_df = df[(df['Radius'] == radius_value) & (df['FRR'] == frr_value)]
            Luminance = float(sub_df['Luminance'])  # 找到mean Luminance
            if np.isnan(Luminance):
                print('NAN, continue')
                continue
            contrast = 1 / luminance_vrr_2_sensitivity.LT2S(Luminance, frr_value) #推出在这个光照下的对比度，以生成对应的视频
            delta_Luminance = float(Luminance * contrast)
            disp_photo = pyfvvdp.fvvdp_display_photo_absolute(Luminance_peak)
            metric = pyfvvdp.fvvdp(display_name='lg_oled_g1', display_photometry=disp_photo, heatmap='raw', foveated=True)
            video_test, video_reference = generate_quest_luminance_one_video(radius_value, frr_value, fps, screen_width,
                                                                             screen_height, Luminance, delta_Luminance,
                                                                             total_frames)
            # video_test_luminance = video_test[:,:,0,:]
            # video_reference_luminance = video_reference[:, :, 0, :]
            start = time.time()
            Q_JOD_static, stats_static = metric.predict(video_test.astype('float32'), video_reference.astype('float32'), dim_order="HWCF",
                                                        frames_per_second=fps)
            heatmap_video = stats_static['heatmap'].cpu()  # [1, channel, frames, height, width]
            heatmap_video = heatmap_video.expand(1,3,-1,-1,-1).squeeze(0).numpy()

            heatmap_video = (heatmap_video * 255).astype(np.uint8)
            heatmap_video = np.transpose(heatmap_video, (1, 2, 3, 0))

            fourcc = cv2.VideoWriter_fourcc(*'mp4v')
            fps = 120
            video_filename = os.path.join(r'E:\Py_codes\FovVideoVDP_flicker\VRR_Flicker\heatmap_visualization_raw', f'heatmap_video_Radius_{radius_value}_FRR_{frr_value}.mp4')
            frame_size = (heatmap_video.shape[2], heatmap_video.shape[1])  # (width, height)
            out = cv2.VideoWriter(video_filename, fourcc, fps, frame_size)
            for frame in heatmap_video:
                out.write(frame)
            out.release()

            gif_file_name = os.path.join(r'E:\Py_codes\FovVideoVDP_flicker\VRR_Flicker\heatmap_visualization_raw',
                                         f'heatmap_video_Radius_{radius_value}_FRR_{frr_value}.gif')
            frames = []
            for frame in heatmap_video:
                frames.append(frame)
            imageio.mimsave(gif_file_name, frames, fps=120)

            end = time.time()
            print(f'Radius_{radius_value}_FRR_{frr_value}')
            print('Quality for sizestatic noise: {:.3f} JOD (took {:.4f} secs to compute)'.format(Q_JOD_static, end - start))
            quality_array[radius_index, frr_index] = Q_JOD_static
    json_dump_dict['quality'] = quality_array.tolist()
    json_dump_dict['radius_list'] = radius_list
    json_dump_dict['frr_list'] = frr_list
    json_dump_dict['duration'] = duration
    json_dump_dict['fps'] = fps
    json_dump_dict['screen_width'] = screen_width
    json_dump_dict['screen_height'] = screen_height
    with open('FovVideoVDP_flikcer_JOD_results_L_peak_10_foveated_min_freq_0.json', 'w') as fp:
        json.dump(json_dump_dict, fp)


if __name__ == "__main__":
    # size_list = [0.5, 1, 16, 'full']
    # vrr_f_list = [0.5, 2, 4, 8, 10, 12, 14, 16]
    duration = 2  # seconds
    fps = 120  # frames per second assume
    screen_width = int(3840 / 10)
    screen_height = int(2160 / 10)
    get_quality_for_all_settings(duration, fps, screen_width, screen_height)
