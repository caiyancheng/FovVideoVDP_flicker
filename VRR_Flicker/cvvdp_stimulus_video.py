# Example showing how to run FovVideoVDP on a numpy array with a video
# The video is autogenerated in this example. See ex_aliasing.py for an example in which video is loaded from .mp4 files

import os
import time
import numpy as np
import examples.ex_utils as utils
import json
import pycvvdp
from generate_stimulus_videos import Luminance2Contrast, generate_quest_luminance_one_video

'''
Results of current version (for reference):
Quality for static noise: 8.793 JOD (took 2.4667 secs to compute)
Quality for dynamic noise: 9.307 JOD (took 1.4988 secs to compute)
'''

size_value = 0.5
vrr_f_value = 0.5
fps = 120
screen_width = int(3840/10)
screen_height = int(2160/10)
duration = 2
total_frames = duration * fps

with open('E:\Py_codes\VRR_Real\VRR_subjective_Quest\Result_Quest_disk_4_all/Luminance_mean.json', 'r') as fp:
    Luminance_mean_dict = json.load(fp)
L_mean_array = np.array(Luminance_mean_dict['L_mean_list'])
query_size_list = Luminance_mean_dict['size_list']
query_vrr_f_list = Luminance_mean_dict['vrr_f_list']
query_size_index = query_size_list.index(size_value)
query_vrr_f_index = query_vrr_f_list.index(vrr_f_value)
Luminance = float(L_mean_array[query_size_index, query_vrr_f_index])  # 找到mean Luminance
contrast = Luminance2Contrast(size_value=size_value, Luminance_value=Luminance)
delta_Luminance = float(contrast) * Luminance

disp_photo = pycvvdp.vvdp_display_photo_eotf(Luminance+delta_Luminance, contrast=1000000, source_colorspace='BT.709', EOTF="linear",
                                             E_ambient=0)
metric = pycvvdp.cvvdp(display_name='lg_oled_g1', display_photometry=disp_photo)

size_value = 10
video_test, video_reference = generate_quest_luminance_one_video(size_value, vrr_f_value, fps, screen_width,
                                                                 screen_height, Luminance, delta_Luminance,
                                                                 total_frames)
# video_difference = video_test - video_reference

start = time.time()
Q_JOD_static, stats_static = metric.predict(video_test, video_reference, dim_order="HWCF", frames_per_second=fps)
end = time.time()
print(f'Size_{size_value}_FRR_{vrr_f_value}')
print('Quality for sizestatic noise: {:.3f} JOD (took {:.4f} secs to compute)'.format(Q_JOD_static, end - start))
